# The Log4j package is organized around the concept of categories.
# Log4j can have any number of categories at any time during the running of your application.
# There will always be a root category, which is the start of the hierarchy of categories.
# Categories are named using a dot notation just like Java packages.
#
# The available priorities are debug, info, warn, error, and fatal

# Set root category priority to INFO and its only appender to A1.
log4j.rootCategory=INFO, A2
log4j.category.org.apache.commons.digester.Digester=FATAL


# Log4j uses appenders to specify what type of logging is performed
# when a statement is received by the logging package.
# Log4j's standard appenders are screen, file, rotating file, and a remote appender
# that allows the collection of log data in a central location.
# The appenders are applied to the categories so that different parts
# of the application can have different log destinations.

# Doing logging: each class within your application that requires logging capability
# needs a reference to the category object. Since the category uses a package naming
# convention, oftenly the class name is used as the category even though this is not
# required, depending on how you have arranged the configuration.
# Declaring a single static variable for the class will make the logging routines available:
#
#    import org.apache.log4j.Category;
#    ...
#    private static final Category log = Category.getInstance(MyClass.class.getName());
#
# oder (bisher nur so gesehen...)
#
#    import org.apache.log4j.Logger;
#    ...
#    private static final Logger LOG = Logger.getLogger(MyClass.class);
#
# Logging the event
# Now logging within your application is easy. Just call the method that corresponds
# to the priority of the message you are logging. For instance, here's a debug message:
#
#    LOG.debug("Log4j really works!");
#
# If you wanted to make sure the debug priority was active, you could check it before
# making the debug call. Note that the message would not be logged even if you sent it,
# unless the priority was set properly. Checking the current priority is simply a method
# to avoid expensive operations prior to attempting the log operation.
# Here is an example of checking the priority before the log statement.
#
#    if (LOG.isDebugEnabled()) {
#      log.debug("Another log statement.?);
#    }
#
# You can also add an exception to the log method so that the details of the exception
# are included with the log message. This call takes the following form:
#
#    LOG.warn("Oops caught an exception.", myException);
#


# ------------------Appenders----------------------

# A1 is set to be a ConsoleAppender. 
log4j.appender.A1=org.apache.log4j.ConsoleAppender

# Once you have set the priority and appenders for the categories,
# the only requirement left is to specify a layout.
# Layouts control the exact format of your logging statements,
# such as the date, time, module name, and thread identifications.
#
# The % sign is used to specify a format character.
#
# %d: the date,
# %m: the message
# %n: a line termination character
# %-5p: left alignment using five characters for the priority (p)
# %t: the thread information

# A1 uses PatternLayout.
log4j.appender.A1.layout=org.apache.log4j.PatternLayout
log4j.appender.A1.layout.ConversionPattern=%r %c{1} [%p] %m%n
#log4j.appender.A1.layout.ConversionPattern=%-5p [%t] - %m%n


# A2 is a DailyRollingFileAppender
log4j.appender.A2=org.apache.log4j.DailyRollingFileAppender
log4j.appender.A2.file=/var/log/cmslight/cmslight.log
log4j.appender.A2.datePattern='-'yyyy-MM-dd
log4j.appender.A2.append=true
log4j.appender.A2.layout=org.apache.log4j.PatternLayout
log4j.appender.A2.layout.ConversionPattern=%-5p %d{ISO8601} [%t] - %m%n


# A3 is an UDPAppender for sending logs as broadcast UDP packets
log4j.appender.A3=org.apache.log4j.net.UDPAppender
log4j.appender.A3.remoteHost=192.168.15.255
log4j.appender.A3.port=8881
log4j.appender.A3.layout=org.apache.log4j.PatternLayout
log4j.appender.A3.layout.ConversionPattern=%-5p %d{ISO8601} [%t] - %m%n